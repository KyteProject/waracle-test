{"version":3,"sources":["components/CakeList.js","components/CakeAdd.js","views/Home.js","App.js","serviceWorker.js","index.js"],"names":["List","styled","ul","_templateObject","fetchCakes","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","setCakes","res","cakeList","wrap","_context","prev","next","axios","get","concat","process","sent","t0","console","log","data","stop","this","_x","apply","arguments","CakeList","_useState","useState","_useState2","slicedToArray","cakes","_useGlobal","useGlobal","_useGlobal2","modalSate","setModal","_useGlobal3","_useGlobal4","submit","setSubmit","closeModal","useEffect","react_default","createElement","map","cake","key","id","name","src","imageUrl","alt","onClick","lib_default","isOpen","onRequestClose","contentLabel","height","width","comment","yumFactor","CakeAdd","setName","_useState3","_useState4","setComment","_useState5","_useState6","setYumFactor","_useState7","_useState8","setImageUrl","_useState9","_useState10","formErrors","setFormErrors","onSubmit","event","preventDefault","exec","post","err","required","type","onChange","target","value","placeholder","Home","Fragment","components_CakeAdd","components_CakeList","Modal","setAppElement","document","getElementById","Title","h1","App_templateObject","App","setGlobal","globalModalState","cakeSubmit","es","views_Home","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52fd5bcf.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useGlobal } from 'reactn';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport Modal from 'react-modal';\n\nconst List = styled.ul`\n\tposition: absolute;\n\tmargin: 0;\n\tpadding: 50;\n\n\tli {\n\t\tlist-style-type: none;\n\t}\n\n\timg {\n\t\twidth: 150px;\n\t\theight: 150px;\n\t}\n`;\n\n/**\n * Fetches cake list array from API and updates component state.\n * @param {function} setCakes - The title update function.\n */\nconst fetchCakes = async( setCakes ) => {\n\tlet res;\n\n\ttry {\n\t\tres = await axios.get( `${process.env.REACT_APP_CAKE_API}` );\n\t} catch ( err ) {\n\t\tconsole.log( `Error has occured: ${err}` );\n\t}\n\n\tconst cakeList = res.data;\n\n\tsetCakes( cakeList );\n};\n\n/**\n *  List all cakes, showing only the image and name\n */\nconst CakeList = () => {\n\tconst [ cakes, setCakes ] = useState( [] ),\n\t\t[ modalSate, setModal ] = useGlobal( 'globalModalState' ),\n\t\t[ submit, setSubmit ] = useGlobal( 'cakeSubmit' );\n\n\tconst openModal = ( id ) => {\n\t\t\tsetModal( `${id}` );\n\t\t},\n\t\tcloseModal = () => {\n\t\t\tsetModal( '' );\n\t\t};\n\n\tuseEffect(\n\t\t() => {\n\t\t\tfetchCakes( setCakes );\n\t\t\tsetSubmit( false );\n\t\t},\n\t\t[ submit ]\n\t);\n\n\treturn (\n\t\t<List>\n\t\t\t{cakes.map( ( cake ) => (\n\t\t\t\t<li key={cake.id}>\n\t\t\t\t\t<h4>{cake.name}</h4>\n\t\t\t\t\t<img src={cake.imageUrl} alt={cake.name} onClick={() => openModal( `${cake.id}` )} />\n\t\t\t\t\t<hr />\n\t\t\t\t\t<Modal isOpen={modalSate === cake.id} onRequestClose={closeModal} contentLabel=\"Cake Details\">\n\t\t\t\t\t\t<button onClick={closeModal}>Close</button>\n\t\t\t\t\t\t<p>Name: {cake.name}</p>\n\t\t\t\t\t\t<img src={cake.imageUrl} alt={cake.name} height=\"250\" width=\"250\" />\n\t\t\t\t\t\t<p>Comment: {cake.comment}</p>\n\t\t\t\t\t\t<p>Yum Factor: {cake.yumFactor}</p>\n\t\t\t\t\t</Modal>\n\t\t\t\t</li>\n\t\t\t) )}\n\t\t</List>\n\t);\n};\n\nexport default CakeList;\n","import React, { useState } from 'react';\nimport { useGlobal } from 'reactn';\nimport axios from 'axios';\n\n/**\n * Submits a cake to the API\n */\nconst CakeAdd = () => {\n\tconst [ name, setName ] = useState( '' ),\n\t\t[ comment, setComment ] = useState( '' ),\n\t\t[ yumFactor, setYumFactor ] = useState( '' ),\n\t\t[ imageUrl, setImageUrl ] = useState( '' ),\n\t\t[ formErrors, setFormErrors ] = useState( '' ),\n\t\t[ modalSate, setModal ] = useGlobal( 'globalModalState' ),\n\t\t[ submit, setSubmit ] = useGlobal( 'cakeSubmit' );\n\n\tconst handleSubmit = ( event ) => {\n\t\tevent.preventDefault();\n\n\t\tconst cake = {\n\t\t\t\tname,\n\t\t\t\tcomment,\n\t\t\t\timageUrl,\n\t\t\t\tyumFactor\n\t\t\t},\n\t\t\turlRegex = /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/;\n\n\t\tif ( urlRegex.exec( cake.imageUrl ) === null ) {\n\t\t\treturn setFormErrors( 'Not a valid URL' );\n\t\t}\n\n\t\ttry {\n\t\t\taxios.post( `${process.env.REACT_APP_CAKE_API}`, cake );\n\t\t} catch ( err ) {\n\t\t\tconsole.log( `Error has occured: ${err}` );\n\t\t}\n\n\t\tsetSubmit( true );\n\t\tsetModal( false );\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\trequired\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"name\"\n\t\t\t\t\tid=\"input-name\"\n\t\t\t\t\tonChange={( event ) => setName( event.target.value )}\n\t\t\t\t\tplaceholder=\"Cake name\"\n\t\t\t\t/>\n\t\t\t\t<input\n\t\t\t\t\trequired\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"imageUrl\"\n\t\t\t\t\tid=\"input-image-url\"\n\t\t\t\t\tonChange={( event ) => setImageUrl( event.target.value )}\n\t\t\t\t\tplaceholder=\"Image URL\"\n\t\t\t\t/>\n\t\t\t\t<label>Yum Factor: </label>\n\t\t\t\t<select name=\"yum-factor\" id=\"input-yum-factor\" onChange={( event ) => setYumFactor( event.target.value )}>\n\t\t\t\t\t<option value=\"1\">1</option>\n\t\t\t\t\t<option value=\"2\">2</option>\n\t\t\t\t\t<option value=\"3\">3</option>\n\t\t\t\t\t<option value=\"4\">4</option>\n\t\t\t\t\t<option value=\"5\">5</option>\n\t\t\t\t</select>\n\t\t\t\t<input\n\t\t\t\t\trequired\n\t\t\t\t\tname=\"comment\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tid=\"input-message\"\n\t\t\t\t\tplaceholder=\"A nice comment!\"\n\t\t\t\t\tonChange={( event ) => setComment( event.target.value )}\n\t\t\t\t/>\n\t\t\t\t<button type=\"submit\" id=\"input-submit\">\n\t\t\t\t\tSubmit cake!\n\t\t\t\t</button>\n\t\t\t\t<p>{formErrors}</p>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nexport default CakeAdd;\n","import React from 'react';\nimport Modal from 'react-modal';\nimport { useGlobal } from 'reactn';\nimport CakeList from '../components/CakeList';\nimport CakeAdd from '../components/CakeAdd';\n\n/**\n *  Home view: displays list of cakes and option to add one.\n */\nconst Home = () => {\n\tconst [ modalSate, setModal ] = useGlobal( 'globalModalState' );\n\n\tconst openModal = () => {\n\t\t\tsetModal( 'cake-add' );\n\t\t},\n\t\tcloseModal = () => {\n\t\t\tsetModal( '' );\n\t\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<button onClick={() => openModal()}>Submit a cake</button>\n\t\t\t<Modal isOpen={modalSate === 'cake-add'} onRequestClose={closeModal} contentLabel=\"Add cake\">\n\t\t\t\t<button onClick={closeModal}>Close</button>\n\t\t\t\t<h2>Add a new cake!</h2>\n\t\t\t\t<CakeAdd />\n\t\t\t</Modal>\n\t\t\t<CakeList />\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Home;\n","import React from 'react';\nimport { Router } from '@reach/router';\nimport { setGlobal } from 'reactn';\nimport styled from 'styled-components';\nimport Modal from 'react-modal';\nimport Home from './views/Home';\n\n// Hides background content for screenreaders while modal is open\nModal.setAppElement( document.getElementById( 'root' ) );\n\nconst Title = styled.h1`\n\ttext-align: center;\n\ttext-decoration: underline;\n`;\n\nconst App = () => {\n\t// Set global state for CakeAdd modal\n\tsetGlobal( {\n\t\tglobalModalState: '',\n\t\tcakeSubmit: false\n\t} );\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Title>CAKES!</Title>\n\t\t\t<Router>\n\t\t\t\t<Home path=\"/\" />\n\t\t\t</Router>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}